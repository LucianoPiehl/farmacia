from telnetlib import EC

import keyboard as keyboard
from selenium import webdriver
from selenium.webdriver.common.by import By
import time
import xml.etree.ElementTree as ET
import csv
import re
from colorama import Fore
import requests
from selenium import webdriver
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
import pandas as pd
import openpyxl
import re
def iniciar_sesion():
    driver = webdriver.Chrome()
    driver.get('http://sis.carenasistemas.com.ar/Ofertas')
    time.sleep(5)

    elemento = driver.find_element(By.ID, "MainContent_Usu")
    elemento.send_keys("FAR1518")
    time.sleep(2)

    elemento = driver.find_element(By.ID, "MainContent_Psw")
    elemento.send_keys("metro500")
    time.sleep(2)

    boton_inicio_sesion = driver.find_element(By.ID, 'MainContent_cmdOK')
    boton_inicio_sesion.click()
    time.sleep(5)
    enlace_cerrar_modal = driver.find_element(By.CLASS_NAME, 'cerrar_modal')
    enlace_cerrar_modal.click()
    time.sleep(2)
    # Encontrar todos los elementos td que contienen ENLACES A LOS CATALOGOS
    # td_elementos = driver.find_elements(By.XPATH, '//td[input]')
    # time.sleep(2)
    return driver

def obtener_datos(driver,descripciones=[],precios=[], codigos_de_barra=[],cont=0):
    while True:

        cont+=1
        #Obtener descripciones
        td_elements = driver.find_elements(By.XPATH, "//table[@id='MainContent_grdProd']//tbody//tr//td")
        for i in td_elements:
            descripciones.append(i.text)

        #Obtener precios
        td_elements = driver.find_elements(By.XPATH,"//table[@id='MainContent_grdProd' and contains(@style, 'border-collapse:collapse;')]//tbody//tr//td[@align='right']")
        for i in td_elements:
            precios.append(i.text)

        img_elements = driver.find_elements(By.TAG_NAME, 'img')
        for i in img_elements:
            # Agrega el título a la lista
            if ':' in i.get_attribute('title'):
                # Divide el string en dos partes usando ":"
                partes = i.get_attribute('title').split(':')
                codigos_de_barra.append(partes[1])
        print('HACELOOOOOOOOO')  # Clickear en siguiente pagina (Por ahora manual)
        if cont==2:
            print("Tecla Escape detectada. Saliendo del bucle.")
            break
        time.sleep(10)



    return descripciones, precios, codigos_de_barra

def procesar_descripciones(lista_original):

    # Patrón para extraer solo descripciones
    patron_descripcion = re.compile(r'^[A-Za-z0-9\s.]+$', re.UNICODE)

    # Filtrar la lista para obtener solo descripciones
    lista_descripciones = [cadena.strip() for cadena in lista_original if patron_descripcion.match(cadena)]

    # Mostrar la lista resultante
    print(lista_descripciones)
    return lista_descripciones


def escribir(descripciones, precios, codigos_de_barra):
    # Crear un nuevo libro de trabajo (workbook)
    libro = openpyxl.Workbook()

    # Seleccionar la hoja activa del libro (por defecto, hay una hoja llamada 'Sheet')
    hoja = libro.active

    # Escribir los datos en columnas (verticalmente)
    for d, p, c in zip(descripciones, precios, codigos_de_barra):
        hoja.append([d, p, c])

    # Guardar el libro de trabajo en un archivo Excel
    libro.save('datos_bander.xlsx')



def filtrar_descripciones(lista_original):
    # Strings a eliminar
    strings_a_eliminar = set(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '', '1 2 3 4 5 6 7 8 9 10'])

    # Filtrar la lista
    lista_filtrada = [elemento for elemento in lista_original if elemento not in strings_a_eliminar]

    # Mostrar la lista resultante

    # Eliminar elementos en índices impares
    lista_sin_impares = [lista_filtrada[i] for i in range(len(lista_filtrada)) if i % 2 == 0]
    print(lista_sin_impares)
    return lista_sin_impares

def filtrar_codigos_bander(lista_original):
    # Inicializar la lista para terceros elementos
    terceros_elementos = []

    # Iterar sobre la lista original y extraer tercer elemento
    for elemento in lista_original:
        partes = elemento.split()  # Suponiendo que los elementos están separados por espacios
        if len(partes) >= 3:
            tercer_elemento = partes[2]
            terceros_elementos.append(tercer_elemento)

    # Mostrar la lista de terceros elementos
    print(terceros_elementos)

def procesar_precios(precios, precios_final=[]):
    for i in precios:
        nuevo=str(i).replace('.','')
        precios_final.append(nuevo)
    return precios_final

def main():
    driver = iniciar_sesion()
    time.sleep(10)
    descripciones,precios,codigos_de_barra = obtener_datos(driver)
    print(descripciones,precios)
    descripciones_filtradas = filtrar_descripciones(descripciones)
    descripciones_final = procesar_descripciones(descripciones_filtradas)
    precios_finales= procesar_precios(precios)
    escribir(descripciones_final,precios_finales,codigos_de_barra)

main()